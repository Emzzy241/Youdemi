Making a basic sign-up + sign-in into  the Youdemi Project.

Stack for it:
Prisma ORM
PostgreSQL
Docker to containerize our application
Html
CSS
JavaScript


What App will do, Very simple inside the public directory, I will just add everything, the html css and js into a single page be it for the sign-up Page or the Actual Page itself.


Let's go!!!


Steps:
1. Setup App, then run npm install and npm start (after creating a start script: node ./server.js in manifest)
2. npx prisma init -- To create a prisma client, and also helps to fix bug that keeps breaking the start of the application, also to create the prisma/schema.prisma file


// Check the dashboard.html file, there are 2 things you need to do:
1. confirm 
2. Set the course status to completed


// NOW, Sign Up and Sign In are both working.

However, to sign-in, you can only do that with a username.. So I need to create something where I would then tell users that they an choose to either enter their email or their username.

So I check the input they give and deduce whether it includes @ symbol for an email, if it does, then I know that the user wants to sign in with an email, if it doesn't, I know that Users want to sign in with a username




// Huge Bug to fix, Prisma is failing to create the User, the findUnique() from Prisma is failing to find a Unique user with that unique email

// Making a considerable amount of progress, I tested my code out in the REST emulator and it worked fine and responded when user entered an already existing email, and an already existing username, thus preventing them from going ahead


// Future fixes for prod; Ensuring that User's cannot enter an invalid email address, I can use an API for sites like verifalia to ensure that an anyhow person cannot just enter a wrong email address, it will be initially sent to their site to verify before User logs in.... Latency might arise, just make sure your application is super fast

// Future updates, allowing users to sign up with google account, GitHub account, (if possible), Apple Account

// TODO, Later On,

// A confirm Password feature, and test it in the REST Emulator

// Update the COure table to reflect this, as this is something very similar to what I hope to achieve


{
    "courseName": "CHM 101 - Chemistry",
    "courseDescription": "An introductory course in Chemistry covering basic principles and concepts.",
    "courseImage": "https://example.com/course-image.jpg",
    "coursePrice": 49.99,
    "courseCategory": "Science",
    "courseDuration": "10 weeks",
    "courseInstructor": "Dr. Jane Doe",
    "courseContent": [
        {
            "title": "Week 1: Introduction to Chemistry",
            "description": "Overview of basic chemistry concepts and principles.",
            "resources": [
                {
                    "type": "video",
                    "url": "https://example.com/video1.mp4"
                },
                {
                    "type": "document",
                    "url": "https://example.com/document1.pdf"
                }
            ]
        },
        {
            "title": "Week 2: Atomic Structure",
            "description": "Understanding the structure of atoms and their components.",
            "resources": [
                {
                    "type": "video",
                    "url": "https://example.com/video2.mp4"
                }
            ]
        }
    ]
}

//Below is th current Course schema that we have, later on, update it to reflect this so you can now make a POST /COURSE to add a new course:


model Course {
  id        Int     @id @default(autoincrement())
  courseName      String
  completed Boolean @default(false)
  userId    Int
  user      User    @relation(fields: [userId], references: [id])
}




// TODO: FOR THE COUSES, WRITE ENDPOINTS FOR THE FOLLOWING:

### Testing the /app/completed endpoint to get all completed courses
GET http://localhost:5000/app/completed
Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MzYsImlhdCI6MTc1MDczMjc2MSwiZXhwIjoxNzUwODE5MTYxfQ.p2p4vNlg6iDSjTIy8mDojQvYJErk7h_ZYCgi8R1GnDM
### Testing the /app/active endpoint to get all active courses
GET http://localhost:5000/app/active
Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MzYsImlhdCI6MTc1MDczMjc2MSwiZXhwIjoxNzUwODE5MTYxfQ.p2p4vNlg6iDSjTIy8mDojQvYJErk7h_ZYCgi8R1GnDM
### Testing the /app/archived endpoint to get all archived courses
GET http://localhost:5000/app/archived
Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MzYsImlhdCI6MTc1MDczMjc2MSwiZXhwIjoxNzUwODE5MTYxfQ.p2p4vNlg6iDSjTIy8mDojQvYJErk7h_ZYCgi8R1GnDM
### Testing the /app/search endpoint to search for courses by name
GET http://localhost:5000/app/search?courseName=CHM
Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MzYsImlhdCI6MTc1MDczMjc2MSwiZXhwIjoxNzUwODE5MTYxfQ.p2p4vNlg6iDSjTIy8mDojQvYJErk7h_ZYCgi8R1GnDM
### Testing the /app/archived/:id endpoint to archive a specific course by ID
POST http://localhost:5000/app/archived/36
Content-Type: application/json
Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MzYsImlhdCI6MTc1MDczMjc2MSwiZXhwIjoxNzUwODE5MTYxfQ.p2p4vNlg6iDSjTIy8mDojQvYJErk7h_ZYCgi8R1GnDM

{
    "archived": 1
}
### Testing the /app/archived/:id endpoint to unarchive a specific course by ID
POST http://localhost:5000/app/archived/36
Content-Type: application/json
Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MzYsImlhdCI6MTc1MDczMjc2MSwiZXhwIjoxNzUwODE5MTYxfQ.p2p4vNlg6iDSjTIy8mDojQvYJErk7h_ZYCgi8R1GnDM

{
    "archived": 0
}
### Testing the /app/completed/:id endpoint to mark a specific course as completed by ID
POST http://localhost:5000/app/completed/36
Content-Type: application/json
Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MzYsImlhdCI6MTc1MDczMjc2MSwiZXhwIjoxNzUwODE5MTYxfQ.p2p4vNlg6iDSjTIy8mDojQvYJErk7h_ZYCgi8R1GnDM

{
    "completed": 1
}
### Testing the /app/completed/:id endpoint to mark a specific course as not completed by ID
POST http://localhost:5000/app/completed/36
Content-Type: application/json
Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MzYsImlhdCI6MTc1MDczMjc2MSwiZXhwIjoxNzUwODE5MTYxfQ.p2p4vNlg6iDSjTIy8mDojQvYJErk7h_ZYCgi8R1GnDM

{
    "completed": 0
}
### Testing the /app/completed/:id endpoint to mark a specific course as active by ID
POST http://localhost:5000/app/active/36
Content-Type: application/json
Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MzYsImlhdCI6MTc1MDczMjc2MSwiZXhwIjoxNzUwODE5MTYxfQ.p2p4vNlg6iDSjTIy8mDojQvYJErk7h_ZYCgi8R1GnDM

{
    "active": 1
}














A brief overview of the Authorization:

There will be 4 roles; User, Admin, Instructor, Students. 

1. Every one who signs up is a User
2. Admin will be hardcoded for now i.e Directly from the codebase, I will be updating the Admin status i.e I will set a username and password for an admin, from the codebase (research how to do that online or watch a course on YouTube for it, search: User-Roles JavaScript NodeJS... If their ORM tool isn't Prisma or their database is not PostgreSQL, use AI alongside documentation to implement, ask AI for where you should be reading in the documentation to be able to solve this issue, don't just ask it to solve it for you in ORM + PRISMA, as Ma'am Kim always say; Learn how to read documentation please)
3. An Admin can make a User an Instructor
4. An admin will also be the one to make  a User a Student.

// So it is only when one is signed up as an Admin that I 

// Read on Permissions in the RBAC (Role-Based Architecture) System.








Alright then Mr. Paul, I already saved you the stress of coming up with the message... 

Kindly tag us at with this:

@Bloomvesthq on Facebook 

And @BloomvestHQ on Twitter





Good morning and welcome to Bloomvest! üëã
We‚Äôre so excited to have you join a growing community where smart saving meets trusted people üíú

Whether you're saving for a goal, building wealth one step at a time, or love the structure of the Ajo lifestyle ‚Äî there's a perfect circle waiting for you.

üí° Explore Our Active Ajo Plans:
üîπ Budget Boost üí∞
‚Ç¶5,000 weekly | Get ‚Ç¶25,000
ü™ë All slots filled!
üìÜ Kicked off: June 21

üîπ Hustle Circle üíº
‚Ç¶10,000 weekly | Get ‚Ç¶100,000
üî• 10 slots available
üìÜ Starts: June 28
Ideal for consistent weekly savers!

üîπ Monthly Builders üß±
‚Ç¶20,000 monthly | Get ‚Ç¶100,000
‚ö° 4 slots left
üìÜ Starts: June 30
Perfect for steady monthly savings

üîπ Premium Rotator üíé
‚Ç¶50,000 monthly | Get ‚Ç¶500,000
üî• 10 slots available
üìÜ Starts: July 1
For serious, goal-driven savers üíº

üîπ Family Goals üë®‚Äçüë©‚Äçüëß‚Äçüë¶
‚Ç¶100,000 monthly | Get ‚Ç¶500,000
üî• 5 slots available
üìÜ Starts: July 15
Great for joint savings with family or trusted friends

üõ†Ô∏è Bloomvest Does More Than Ajo:
With your Bloomvest Wallet, you can also:
üì± Buy Airtime & Data
üí° Pay Electricity Bills
üì∫ Subscribe to Cable TV (DStv, GOtv, Startimes)
All from one secure app ‚Äî anytime, anywhere.

üöÄ Ready to Get Started?
üëâ Reserve your Ajo spot now:
https://www.bloominvest.io/thrift/join

üîê A Few Things to Note:
‚úÖ You‚Äôll be added using your Bloomvest username or email
‚úÖ We‚Äôll notify you once you're added to a group
‚úÖ A ‚Ç¶1,000 one-time commitment fee will be deducted from your first thrift

üìù Don‚Äôt have an account yet?
Create one in under 2 minutes:
üåê https://bloominvest.io/

We're here to help you save smarter, live better, and grow faster.
Feel free to reach out anytime ‚Äî we‚Äôre just a message away! üíú

#TeamBloomvest #SaveWithEase #DigitalAjo #SmartMoneyMoves



