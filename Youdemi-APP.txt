Making a basic sign-up + sign-in into  the Youdemi Project.

Stack for it:
Prisma ORM
PostgreSQL
Docker to containerize our application
Html
CSS
JavaScript


What App will do, Very simple inside the public directory, I will just add everything, the html css and js into a single page be it for the sign-up Page or the Actual Page itself.


Let's go!!!


Steps:
1. Setup App, then run npm install and npm start (after creating a start script: node ./server.js in manifest)
2. npx prisma init -- To create a prisma client, and also helps to fix bug that keeps breaking the start of the application, also to create the prisma/schema.prisma file


// Check the dashboard.html file, there are 2 things you need to do:
1. confirm 
2. Set the course status to completed


// NOW, Sign Up and Sign In are both working.

However, to sign-in, you can only do that with a username.. So I need to create something where I would then tell users that they an choose to either enter their email or their username.

So I check the input they give and deduce whether it includes @ symbol for an email, if it does, then I know that the user wants to sign in with an email, if it doesn't, I know that Users want to sign in with a username




// Huge Bug to fix, Prisma is failing to create the User, the findUnique() from Prisma is failing to find a Unique user with that unique email

// Making a considerable amount of progress, I tested my code out in the REST emulator and it worked fine and responded when user entered an already existing email, and an already existing username, thus preventing them from going ahead.

// Something I studied about my code, if it signs up a specific user, it only allows to edit, get, delete courses created by that single user, and courses created by another user, access to edit them(delete or update), or even get them by their id would not be possible. So to ensure you can edit or delete the right course, each time you sign in, always ensure that you call the /app endpoint first so you can see a list of courses you have access to.

There is a bug here, When I get all Courses (/app), it keeps incrementing the id by 1, check it out

Wait a second, it seems I was the one doing it wrong, I was calling the wrong endpoint actually, (POST instead of GET /app)â€¦. Always cross-check next time.
Just to be on a safe side, get all courses first before you make an update (PUT or DELETE) to them 












101... Where Ibrahim stopped at.

From 102 - 151

Its either I put opened or closed

Date: 01/07/2025 ---> I helped my company in filling our grants (I reviewed over 50 Venture Capitalists and Investment Firms to see if my Company can gain funding from any one of them)



Visit footer section of: https://cchub.africa/aof/innovation-support/ And you will see Growth capital Fund, click and from there you can find investments or visit: https://gc.fund/

Datacamp Fellow,what is it about please

For the dojo own: https://expertdojo.com/application/


Coza 7DG

"Anointing is the engine oil, Passion is the fuel.... The passion keeps you going" Bishop Oyedepo... Your dominion, my dominion is not in view without passion. Passion that cannot be seen is fake. TO be passionless is to be fuel-less, to be fuel-less is to be motionless, to be motionless is to be stagnant

The more passionate a believer for God, the greater the resource he commands. MAthew 6:33, Bishop was 22 when he encountered this scripture.

As you step back, God takes over and as God takes over, the battle is won. The journey will always start with mockery but it will always start with envy. Passion provokes prompt response


Back to coding...
Bug to fix, it still not rendering courses properly.... The issue still stems inside the dashboard.html, run it again, and you will see that there is no response. Fixed. Time: 14:14, 02/07/2025.

Alright, so the next thing now is to try to ensure this project is refactored, and not just refactored but also follow the standards for a course platform app, for now, no extra work on the authentication will be done, more work will just be on the authorization and all... So, as you already know the banger.

The end goal is to:
1. Follow the MVC Architecture for the project. (Use one of your C# projects to see the MVC architecture in place)
2. Have 3 sub-folders (admin, backend, frontend) to keep your code well origanized
3. Branch out, edit the project and ensure it is well built




















// Future fixes for prod; Ensuring that User's cannot enter an invalid email address, I can use an API for sites like verifalia to ensure that an anyhow person cannot just enter a wrong email address, it will be initially sent to their site to verify before User logs in.... Latency might arise, just make sure your application is super fast

// Future updates, allowing users to sign up with google account, GitHub account, (if possible), Apple Account

// TODO, Later On,

// A confirm Password feature, and test it in the REST Emulator

// Update the Course table to reflect this, as this is something very similar to what I hope to achieve


{
    "courseName": "CHM 101 - Chemistry",
    "courseDescription": "An introductory course in Chemistry covering basic principles and concepts.",
    "courseImage": "https://example.com/course-image.jpg",
    "coursePrice": 49.99,
    "courseCategory": "Science",
    "courseDuration": "10 weeks",
    "courseInstructor": "Dr. Jane Doe",
    "courseContent": [
        {
            "title": "Week 1: Introduction to Chemistry",
            "description": "Overview of basic chemistry concepts and principles.",
            "resources": [
                {
                    "type": "video",
                    "url": "https://example.com/video1.mp4"
                },
                {
                    "type": "document",
                    "url": "https://example.com/document1.pdf"
                }
            ]
        },
        {
            "title": "Week 2: Atomic Structure",
            "description": "Understanding the structure of atoms and their components.",
            "resources": [
                {
                    "type": "video",
                    "url": "https://example.com/video2.mp4"
                }
            ]
        }
    ]
}

//Below is th current Course schema that we have, later on, update it to reflect this so you can now make a POST /COURSE to add a new course:


model Course {
  id        Int     @id @default(autoincrement())
  courseName      String
  completed Boolean @default(false)
  userId    Int
  user      User    @relation(fields: [userId], references: [id])
}




// TODO: FOR THE COUSES, WRITE ENDPOINTS FOR THE FOLLOWING:

### Testing the /app/completed endpoint to get all completed courses
GET http://localhost:5000/app/completed
Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MzYsImlhdCI6MTc1MDczMjc2MSwiZXhwIjoxNzUwODE5MTYxfQ.p2p4vNlg6iDSjTIy8mDojQvYJErk7h_ZYCgi8R1GnDM
### Testing the /app/active endpoint to get all active courses
GET http://localhost:5000/app/active
Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MzYsImlhdCI6MTc1MDczMjc2MSwiZXhwIjoxNzUwODE5MTYxfQ.p2p4vNlg6iDSjTIy8mDojQvYJErk7h_ZYCgi8R1GnDM
### Testing the /app/archived endpoint to get all archived courses
GET http://localhost:5000/app/archived
Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MzYsImlhdCI6MTc1MDczMjc2MSwiZXhwIjoxNzUwODE5MTYxfQ.p2p4vNlg6iDSjTIy8mDojQvYJErk7h_ZYCgi8R1GnDM
### Testing the /app/search endpoint to search for courses by name
GET http://localhost:5000/app/search?courseName=CHM
Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MzYsImlhdCI6MTc1MDczMjc2MSwiZXhwIjoxNzUwODE5MTYxfQ.p2p4vNlg6iDSjTIy8mDojQvYJErk7h_ZYCgi8R1GnDM
### Testing the /app/archived/:id endpoint to archive a specific course by ID
POST http://localhost:5000/app/archived/36
Content-Type: application/json
Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MzYsImlhdCI6MTc1MDczMjc2MSwiZXhwIjoxNzUwODE5MTYxfQ.p2p4vNlg6iDSjTIy8mDojQvYJErk7h_ZYCgi8R1GnDM

{
    "archived": 1
}
### Testing the /app/archived/:id endpoint to unarchive a specific course by ID
POST http://localhost:5000/app/archived/36
Content-Type: application/json
Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MzYsImlhdCI6MTc1MDczMjc2MSwiZXhwIjoxNzUwODE5MTYxfQ.p2p4vNlg6iDSjTIy8mDojQvYJErk7h_ZYCgi8R1GnDM

{
    "archived": 0
}
### Testing the /app/completed/:id endpoint to mark a specific course as completed by ID
POST http://localhost:5000/app/completed/36
Content-Type: application/json
Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MzYsImlhdCI6MTc1MDczMjc2MSwiZXhwIjoxNzUwODE5MTYxfQ.p2p4vNlg6iDSjTIy8mDojQvYJErk7h_ZYCgi8R1GnDM

{
    "completed": 1
}
### Testing the /app/completed/:id endpoint to mark a specific course as not completed by ID
POST http://localhost:5000/app/completed/36
Content-Type: application/json
Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MzYsImlhdCI6MTc1MDczMjc2MSwiZXhwIjoxNzUwODE5MTYxfQ.p2p4vNlg6iDSjTIy8mDojQvYJErk7h_ZYCgi8R1GnDM

{
    "completed": 0
}
### Testing the /app/completed/:id endpoint to mark a specific course as active by ID
POST http://localhost:5000/app/active/36
Content-Type: application/json
Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MzYsImlhdCI6MTc1MDczMjc2MSwiZXhwIjoxNzUwODE5MTYxfQ.p2p4vNlg6iDSjTIy8mDojQvYJErk7h_ZYCgi8R1GnDM

{
    "active": 1
}














A brief overview of the Authorization:

There will be 4 roles; User, Admin, Instructor, Students. 

1. Every one who signs up is a User
2. Admin will be hardcoded for now i.e Directly from the codebase, I will be updating the Admin status i.e I will set a username and password for an admin, from the codebase (research how to do that online or watch a course on YouTube for it, search: User-Roles JavaScript NodeJS... If their ORM tool isn't Prisma or their database is not PostgreSQL, use AI alongside documentation to implement, ask AI for where you should be reading in the documentation to be able to solve this issue, don't just ask it to solve it for you in ORM + PRISMA, as Ma'am Kim always say; Learn how to read documentation please)
3. An Admin can make a User an Instructor
4. An admin will also be the one to make  a User a Student.

// So it is only when one is signed up as an Admin that I 

// Read on Permissions in the RBAC (Role-Based Architecture) System.

// I will be looking at other projects online to atleast give me insights into what I will be building. Preferably GitHub projects is what I will be looking at, I will be using them as resources to build this project.



